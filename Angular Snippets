{
  "Angular CRUD Service  Setup": {
    "prefix": "ag-angular-service-CRUD-setup",
    "body": [
      "",
      "import { Injectable } from '@angular/core';",
      "import { HttpClient, HttpHeaders } from '@angular/common/http';",
      "import { Observable, of } from 'rxjs';",
      "import { catchError, map, tap, switchMap, debounceTime, distinctUntilChanged } from 'rxjs/operators';",
      "",
      "const httpOptions = {",
      "    headers: new HttpHeaders({ 'Content-Type': 'application/json' }),",
      "};",
      "",
      " @Injectable({",
      "   providedIn: 'root'",
      " })",
      "export class ${1:ServiceName}DataService {",
      "     ",
      "      constructor(private http: HttpClient) { }",
      "     ",
      "      ${2:apiName}: string = 'http://www.server.com/api/';",
      "     ",
      "      controllername : string = '${3:ControllerName}';",
      "     ",
      "      CreateURL : string         =  this.${2} + this.controllername +  '/CreateActionName';",
      "      DeleteURL : string         =  this.${2} + this.controllername +  '/DeleteActionName';",
      "      UpdateURL : string         =  this.${2} + this.controllername +  '/UpdateActionName';",
      "      GetAllRecordsURL : string  =  this.${2} + this.controllername +  '/getAllRecordsActionName';",
      "      GetRecordsByIdURL : string =  this.${2} + this.controllername +  '/getRecordsActionName';",
      "     ",
      "       //-------------- Get All ${4}s ------------",
      " public getAll${4: Action}s(): Observable < any > {",
      "  return this.http.get<any>(this.GetAllRecordsURL).pipe(",
      "    catchError((error: any) => {",
      "      console.error(error);",
      "      return of();",
      "    }),",
      "  );",
      "}",
      "  ",
      "    ",
      "    //-------------- Create A ${4} ------------",
      "   ",
      "public add${4: Action} (recordData): Observable<any> {",
      "  return this.http.post(this.CreateURL, recordData).pipe(",
      "    catchError((error: any) => {",
      "      console.error(error);",
      "      return of();",
      "    })",
      "  );",
      "}",
      "",
      "       //-------------- Get ${4} by ID ------------",
      "",
      "public get${4}ById(recordid: any): Observable < any > {",
      "  return this.http.get<any>(`${this.GetRecordsByIdURL}/${recordId}`).pipe(",
      "    catchError((error: any) => {",
      "      console.error(error);",
      "      return of();",
      "    })",
      "  );",
      "}",
      "",
      "      //-------------- Update a ${4} ------------",
      "  ",
      "public update${4} (recordUpdate): Observable<any> {",
      "  return this.http.put(this.UpdateURL, recordUpdate, httpOptions).pipe(",
      "    catchError((error: any) => {",
      "      console.error(error);",
      "      return of();",
      "    }),",
      "  );",
      "}",
      "  ",
      "      //--------------Delete A  ${4} ------------",
      "   ",
      "public delete${4} (recordid: any): Observable<any> {",
      "  return this.http.delete(this.DeleteURL + '/recordid').pipe(",
      "    catchError((error: any) => {",
      "      console.error(error);",
      "      return of();",
      "    }),",
      "  );",
      "}",
      "   ",
      "}",
      "    "
    ],
    "description": "Angular CRUD Service  Setup"
  },
  "Angular Service Subscribe": {
    "prefix": "ag-angular-service-Subscribe",
    "body": [
      "  getAll${1:MethodName}() {",
      "",
      "    this.service.getRecords()",
      "      .subscribe(res => {",
      "        this.data = res;",
      "        console.log(this.data);",
      "      }, err => {",
      "        console.log(err);",
      "        // this.isLoadingResults = false;",
      "      });",
      "  }",
      "",
      "",
      "  get${1:MethodName}Byid(id) {",
      "    this.service.getRecordById(id)",
      "      .subscribe(data => {",
      "        this.model = data;",
      "        console.log(this.product);",
      "        // this.isLoadingResults = false;",
      "      });",
      "  }",
      "",
      "",
      "  delete${1:MethodName}(id) {",
      "    this.service.deleteRecord(id)",
      "      .subscribe(res => {",
      "        // this.router.navigate(['/listRecords']);",
      "      }, (err) => {",
      "        console.log(err);",
      "        // this.isLoadingResults = false;",
      "      }",
      "      );",
      "  }",
      "",
      "  create${1:MethodName}() {",
      "    this.service.addRecord(this.model)",
      "      .subscribe(",
      "        data => {",
      "          // this.alertService.success('created record successful', true);",
      "          // this.router.navigate(['/login']);",
      "        },",
      "        error => {",
      "          //  this.alertService.error(error); ",
      "          //  this.loading = false; ",
      "        });",
      "  }",
      "  update${1:MethodName}() {",
      "    this.Service.updateRecord(this.model)",
      "      .subscribe(",
      "        data => {",
      "          // this.alertService.success('updated successful', true);",
      "          // this.router.navigate(['/listReords']);",
      "        },",
      "        error => {",
      "          //  this.alertService.error(error); ",
      "          //  this.loading = false; ",
      "        });",
      "  }"
    ],
    "description": "Angular Service Subscribe"
  },
  "Angular Component": {
    "prefix": "del-angular-component",
    "description": "Creates standar Angular2+ component",
    "body": [
      "import { Component, OnInit } from '@angular/core';",
      "",
      "@Component({",
      "\tselector: '${2:selector-name}',",
      "\ttemplateUrl: '${3:name}.component.html'",
      "})",
      "",
      "export class ${4:Name}Component implements OnInit {",
      "\tconstructor() { }",
      "",
      "\tngOnInit() { }$0",
      "}"
    ]
  },
  "Angular Module": {
    "prefix": "del-angular-module",
    "description": "Creates standard Angular2+ module template",
    "body": [
      "import { NgModule } from '@angular/core';",
      " ",
      "@NgModule({",
      "    declarations: [${2:Name}Component],",
      "    entryComponents: [${2:Name}Component],",
      "})",
      "export class ${2:Name}Module { }"
    ]
  },
  "Angular Http Interceptor": {
    "prefix": "del-http-interceptor",
    "description": "Intercept an outgoing HttpRequest and optionally transform it or the response.",
    "types": "typescript",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import {",
      "\tHttpEvent, HttpInterceptor, HttpHandler, HttpRequest",
      "} from '@angular/common/http';",
      "",
      "@Injectable()",
      "export class ${2:Name}Interceptor implements HttpInterceptor {",
      "\tintercept(req: HttpRequest<any>, next: HttpHandler) {",
      "\t\treturn next.handle(req);",
      "\t}",
      "}"
    ]
  },
  "Angular HttpInterceptor for Logging": {
    "prefix": "del-http-interceptor-logging",
    "description": "Angular HttpInterceptor for Logging HttpClient",
    "body": [
      "import { HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpResponse } from '@angular/common/http';",
      "import { Observable,forkJoin } from 'rxjs';",
      "import { tap, map } from 'rxjs/operators';",
      "import { Injectable } from '@angular/core';",
      "",
      "@Injectable({providedIn: ${2:'root'}})",
      "export class LogInterceptor implements HttpInterceptor {",
      "\tconstructor() {}",
      "",
      "\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
      "\t\tconst started = Date.now();",
      "\t\treturn next.handle(req).pipe(",
      "\t\t\ttap(event => {",
      "\t\t\t\tif (event instanceof HttpResponse) {",
      "\t\t\t\t\tconst elapsed = Date.now() - started;",
      "\t\t\t\t\tconsole.log(`Request for \\${req.urlWithParams} took \\${elapsed} ms.`);",
      "\t\t\t\t}",
      "\t\t\t})",
      "\t\t);",
      "\t}",
      "}"
    ]
  },
  "Angular Error Interceptor":{
    "prefix":"del-http-error-intercceptor",
    "description":"Angular Http Error Interceptor",
    "body":[
      "import { Injectable } from '@angular/core';",
      "import { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';",
      "import { Observable, throwError } from 'rxjs';",
      "import { catchError } from 'rxjs/operators';",
      "import { AuthenticationService } from '../_services';",
      "",
      "@Injectable()",
      "export class ErrorInterceptor implements HttpInterceptor {",
      "\tconstructor(",
      "// private authenticationService: AuthenticationService",
      ") { }",
      "",
      "\tintercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
      "\t\t\t\t\t\treturn next.handle(request).pipe(catchError(err => {",
      " \t\t\t\t\t\t\t\tif ([401, 403].indexOf(err.status) !== -1) {",
      " \t\t\t\t\t\t\t\t\t\t\t// auto logout if 401 Unauthorized or 403 Forbidden response returned from api",
      " \t\t\t\t\t\t\t\t\t\t\t\t\tthis.authenticationService.logout();",
      " \t\t\t\t\t\t\t\t\t\t\t\t\t\tlocation.reload(true);",
      "\t\t\t\t\t\t\t\t\t\t\t\t\t}",
      "",
      "\t\t\t\t\t\t\t\t\tconst error = err.error.message || err.statusText;",
      "\t\t\t\t\t\t\t\t\treturn throwError(error);",
      "\t\t\t\t   }))",
      "\t\t\t   }",
      "\t}  "
    ] 
  },
  "Angular JWT interceptor":{
  "prefix":"del-http-jwt-interceptor",
  "description": "Angular JWT interceptor",
  "body":[
    "import { Injectable } from '@angular/core';",
    "import { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';",
    "import { Observable } from 'rxjs';",
    "import { environment } from '../../environment';",
    "import { AuthenticationService } from '../_services';",
    "",
    "@Injectable()",
    "export class JwtInterceptor implements HttpInterceptor {",
    "\t\t\tconstructor(",
    "\\private authenticationService: AuthenticationService",
    "){ }",
    "",
    "\t\t\tintercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
    "        // add auth header with jwt if user is logged in and request is to api url",
    "\t\t\t\tconst currentUser = this.authenticationService.currentUserValue;",
    "\t\t\t\tconst isLoggedIn = currentUser && currentUser.token;",
    "\t\t\t\tconst isApiUrl = request.url.startsWith(environment.apiUrl);",
    "\t\t\t\tif (isLoggedIn && isApiUrl) {",
    "\t\t\t\t\t\trequest = request.clone({",
    "\t\t\t\t\t\t\t\tsetHeaders: {",
    "\t\t\t\t\t\t\t\t\t\tAuthorization: `Bearer ${currentUser.token}`",
    "\t\t\t\t\t\t\t\t}",
    "\t\t\t\t\t\t\t});",
    "\t\t\t\t\t\t}",
    "",
    "\t\t\t\t\treturn next.handle(request);",
    "\t\t\t\t}",
    "}"
  ]

}
}
